When would you want to use a remote repository rather than keeping all your work local?

I think we have two answers for this question. The first and most common one is when you are working with a team and everyone is contributing in the project. 

The second, and in my opinion a very critical one, is for have a backup of all your work. Imagining you are working in a very huge project and suddenly your computer dies. If you don't have a backup you'll be in a very hard place.

==

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because if you are working with a team, sometimes there are some new updates available on the remote repository that will cause conflicts with your current code. So it's wise to check the changes made on the remote repository before push.

==

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork is used only on GitHub. It will copy a enterely repository to you own account. But the owner of the original repository will know that you have copied it. All the changes made on the copied repository will not affect the original one.

Clone is when you copy a repository directly to your computer. In that mode, the owner will not know that his repository was copied by someone. All the changes made on the copied repository will not affect the original one.

Branches is made on your own repository to create separated path from your master branch. The branch will allow you to work, for instance, in a new version of your code, without impact the code in production.

Fork is used on the GitHub website.

Clone is used to get your own created online repository to your computer.

Branch is used either on you computer or on the GitHub website to create a separated version of your master branch.

==

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit it's to not to be so behind if the other person is working with you. Imagine if have to go to some place without internet access and you have to work on the project without having the possibility of pushing. When you came back, all the work made by you and you co-worker will have to be merged. Now, imagine how different the code is now from the time you went off? I suppose it will be pretty different. So, in order to prevent that from happening if you have internet access, it's important to pull the files everytime you have the oportunity to do so.

==

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Well, the only way I can think of collaboration without GitHub would be using some sort of platform or server that could be used simultaneously. I think there is no easy way on that one, since you would have to do the changes in your computer, upload then send e-mail to your collaborators to see what you've changed than merge.

==

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

You make changes on a separate branch when your master has all the working code and it's in a production environment. So, in order to implement new features without disrupting a well organized code, you start to implement new changes on separate branch where you can try wherever you want.

The benefit is all talked above plus you can share and check your code with your collaborators using pull-requests and, after everything is the way you want you can simply merge into your master knowing that the code won't break.